// 给定的闭包是针对这个项目的 ScriptHandler 执行的，ScriptHandler 被传递给闭包并设置成其 delegateThe ScriptHandler is passed to the closure as the closure's delegate
buildscript { ScriptHandler scriptHandler ->
    apply from: 'config.gradle'
    // Executes the given closure against the RepositoryHandler for this ScriptHandler.
    repositories { RepositoryHandler repositoryHandler ->
        google()
        jcenter()
        maven { // task-tree 插件需要用到该库
            url "https://plugins.gradle.org/m2"
        }
    }
    // Executes the given closure against the DependencyHandler for this ScriptHandler.
    dependencies { DependencyHandler dependencyHandler ->
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'cz.malohlava:visteg:1.0.3' // Task 依赖关系图生成插件。https://github.com/mmalohlava/gradle-visteg
        classpath 'gradle.plugin.com.dorongold.plugins:task-tree:1.3' // 将项目下的 Task 依赖关系以树的形式输出到终端 https://github.com/dorongold/gradle-task-tree
    }
}
// 引入 Task 依赖关系图生成的插件
apply plugin: 'cz.malohlava.visteg'
visteg {
    enabled = true // 为项目启用插件
    colouredNodes = true // 生成有色节点
    colouredEdges = true // 生成彩色边缘
    destination = 'build/reports/visteg.dot' // 输出文件位置
    /**
     * 根据 visteg.dot 文件生成 Task 依赖关系图
     * cd build/reports
     * dot -Tpng ./visteg.dot -o ./visteg.dot.png
     *
     * 也可以通过 http://www.graphviz.org https://gitlab.com/graphviz/graphviz 来查看
     */
    exporter = 'dot' // 图形导出器的名称，现在只支持 dot 值
    colorscheme = 'spectral11' // 用于图形着色的配色方案的名称
    nodeShape = 'box' // 图形内部节点所用形状的名称
    startNodeShape = 'hexagon' // 图形起始节点所用形状的名称
    endNodeShape = 'doubleoctagon' // 图形叶节点所用形状的名称
}

// 引入将项目下的 Task 依赖关系以树的形式输出到终端的插件。gradle <task 1>...<task N> taskTree
apply plugin: "com.dorongold.task-tree"
taskTree {
    noRepeat = false  //do not print a sub-tree in the task-tree more than once
    impliesSubProjects = false  //do not print task-tree for child projects in a multi-project
}

// The target Project is passed to the closure as the closure's delegate
allprojects { Project targetProject ->
    // 这里获取 project 是调用闭包 delegate（参数 targetProject） 中的 getProject() 方法，也就是 targetProject
//    println "allprojects ${project.name}" // 输出所有项目名称，包括自己
    repositories {
        google()
        jcenter()
    }
}

// The target Project is passed to the closure as the closure's delegate
subprojects { Project targetProject ->
    // 这里获取 project 是调用闭包 delegate（参数 targetProject） 中的 getProject() 方法，也就是 targetProject
//    println "subprojects ${project.name}" // 输出所有子项目名称，不包括自己
}
// gradle projects 查看所有的 Project

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply from: "${rootDir}/lifecycle.gradle"
apply from: "${rootDir}/file_commandline.gradle"
apply from: "${rootDir}/task.gradle"
apply from: "${rootDir}/releaseinfo.gradle"